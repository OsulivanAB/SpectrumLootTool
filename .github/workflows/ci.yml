name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Lua for syntax checking
      run: |
        sudo apt-get update
        sudo apt-get install -y lua5.3
        lua -v
        luac -v
    
    - name: Validate Lua syntax
      run: |
        echo "Checking Lua syntax for all .lua files..."
        syntax_errors=0
        
        for lua_file in *.lua; do
          if [ -f "$lua_file" ]; then
            echo -n "Checking $lua_file... "
            if luac -p "$lua_file" 2>/dev/null; then
              echo "✅ Valid"
            else
              echo "❌ Syntax Error"
              echo "Detailed error for $lua_file:"
              luac -p "$lua_file"
              syntax_errors=$((syntax_errors + 1))
            fi
          fi
        done
        
        if [ $syntax_errors -gt 0 ]; then
          echo "Error: Found $syntax_errors Lua files with syntax errors!"
          exit 1
        fi
        
        echo "All Lua files have valid syntax ✅"
    
    - name: Validate TOC file
      run: |
        if [ ! -f "SpectrumLootTool.toc" ]; then
          echo "Error: SpectrumLootTool.toc file not found!"
          exit 1
        fi
        
        # Extract version from TOC file and remove all whitespace/newlines
        TOC_VERSION=$(grep "^## Version:" SpectrumLootTool.toc | sed 's/## Version: //' | tr -d '\n\r\t ' | sed 's/[[:space:]]*$//')
        echo "TOC Version: $TOC_VERSION"
        
        # Extract version from Core.lua and remove all whitespace/newlines
        CORE_VERSION=$(grep 'SLH.version = ' Core.lua | sed 's/.*SLH.version = "\(.*\)".*/\1/' | tr -d '\n\r\t ' | sed 's/[[:space:]]*$//')
        echo "Core.lua Version: $CORE_VERSION"
        
        # Debug output with quotes to show any invisible characters
        echo "TOC_VERSION='$TOC_VERSION'"
        echo "CORE_VERSION='$CORE_VERSION'"
        
        # Check if versions match
        if [ "$TOC_VERSION" != "$CORE_VERSION" ]; then
          echo "Error: Version mismatch between TOC ($TOC_VERSION) and Core.lua ($CORE_VERSION)"
          exit 1
        fi
        
        echo "Version validation passed: $TOC_VERSION"
    
    - name: Validate Lua files
      run: |
        # Check that all Lua files mentioned in TOC exist
        grep "\.lua" SpectrumLootTool.toc | tr -d '\r' | while read -r lua_file; do
          if [ ! -f "$lua_file" ]; then
            echo "Error: Lua file $lua_file referenced in TOC but not found!"
            exit 1
          fi
        done
        
        # Check syntax of all Lua files mentioned in TOC
        echo "Validating syntax of TOC-referenced Lua files..."
        grep "\.lua" SpectrumLootTool.toc | tr -d '\r' | while read -r lua_file; do
          echo -n "Checking TOC file $lua_file... "
          if luac -p "$lua_file" 2>/dev/null; then
            echo "✅ Valid"
          else
            echo "❌ Syntax Error"
            echo "Detailed error for $lua_file:"
            luac -p "$lua_file"
            exit 1
          fi
        done
        
        echo "All TOC-referenced Lua files validation passed"
    
    - name: Check addon structure
      run: |
        # Verify required files exist
        required_files=("SpectrumLootTool.toc" "Core.lua" "UI.lua" "Log.lua" "Debug.lua" "README.md")
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Error: Required file $file not found!"
            exit 1
          fi
        done
        
        echo "Addon structure validation passed"
